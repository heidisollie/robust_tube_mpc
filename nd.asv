

x(:,1) = system.x0;
x_nom(:,1) = system.x0;

for i = 1:system.Nsim
    % Return optimal x and u for horizon
    optimal(i) = optimal_control(problem, x(:,i));
    V(i) = optimal(i).cost_V;
    % Apply first value
    v(:,i) = optimal(i).v(:,1);
    z(:,i) = optimal(i).z(:,1);
    u(:,i) = v(:,i) + problem.system.K * ( x(:,i) - z(:,i));
    x(:,i+1) = problem.system.A * x(:,i) + problem.system.B * u(:,i) ...
             + problem.system.E * problem.system.w_sequence(:,i);
    x_nom(:,i+1) = problem.system.A * x_nom(:,i) + problem.system.B * u(:,i);
	x_traj_1(:,i+1) = problem.system.A * x_traj_1(:,i) + problem.system.B * u(:,i) + w_seq_1(:,i);
    x_traj_2(:,i+1) = problem.system.A * x_traj_1(:,i) + problem.system.B * u(:,i) + w_seq_1(:,i);
    x_traj_3(:,i+1) = problem.system.A * x_traj_1(:,i) + problem.system.B * u(:,i) + w_seq_1(:,i);
    x_traj_1(:,i+1) = problem.system.A * x_traj_1(:,i) + problem.system.B * u(:,i) + w_seq_1(:,i);
    x_traj_1(:,i+1) = problem.system.A * x_traj_1(:,i) + problem.system.B * u(:,i) + w_seq_1(:,i);
    x_traj_1(:,i+1) = problem.system.A * x_traj_1(:,i) + problem.system.B * u(:,i) + w_seq_1(:,i);

for i=1:10
    w_sequences(i) = generate_disturbance(problem);
end

